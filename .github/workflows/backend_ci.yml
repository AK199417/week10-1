name: Backend CI - Test, Scan, and Push to ACR

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend_ci.yml'

env:
  # e.g. arulrajahacr.azurecr.io (set this as a repo secret)
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
  IMAGE_TAG: ${{ github.sha }}-${{ github.run_id }}
  PRODUCT_IMAGE: product_service
  ORDER_IMAGE: order_service

jobs:
  test_and_lint_backends:
    runs-on: ubuntu-latest
    services:
      product_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: products
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports: [ "5432:5432" ]

      order_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports: [ "5433:5432" ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          for req in backend/*/requirements.txt; do
            echo "Installing $req"
            pip install -r "$req"
          done
          pip install pytest httpx

      - name: Run product_service tests
        working-directory: backend/product_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: products
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest tests --maxfail=1 --disable-warnings -q

      - name: Run order_service tests
        working-directory: backend/order_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_DB: orders
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest tests --maxfail=1 --disable-warnings -q

  build_scan_push:
    runs-on: ubuntu-latest
    needs: test_and_lint_backends

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # ---------- Build images ----------
      - name: Build Product image
        run: docker build -t $ACR_LOGIN_SERVER/$PRODUCT_IMAGE:$IMAGE_TAG ./backend/product_service

      - name: Build Order image
        run: docker build -t $ACR_LOGIN_SERVER/$ORDER_IMAGE:$IMAGE_TAG ./backend/order_service

      # ---------- Docker Scout (fail on HIGH/CRITICAL) ----------
      - name: Install Docker Scout
        run: |
          curl -sSfL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh \
          | sh -s -- -b /usr/local/bin
          docker-scout version

      - name: Scan Product image with Docker Scout
        run: docker-scout cves $ACR_LOGIN_SERVER/$PRODUCT_IMAGE:$IMAGE_TAG --only-severity high,critical --exit-code

      - name: Scan Order image with Docker Scout
        run: docker-scout cves $ACR_LOGIN_SERVER/$ORDER_IMAGE:$IMAGE_TAG --only-severity high,critical --exit-code

      # ---------- Push only if scans passed ----------
      - name: Login to ACR (admin)
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Push Product image
        run: docker push $ACR_LOGIN_SERVER/$PRODUCT_IMAGE:$IMAGE_TAG

      - name: Push Order image
        run: docker push $ACR_LOGIN_SERVER/$ORDER_IMAGE:$IMAGE_TAG

      - name: Output image refs
        run: |
          echo "Product: $ACR_LOGIN_SERVER/$PRODUCT_IMAGE:$IMAGE_TAG"
          echo "Order  : $ACR_LOGIN_SERVER/$ORDER_IMAGE:$IMAGE_TAG"
