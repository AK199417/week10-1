name: CD - Deploy Backend Services to AKS

on:
  workflow_dispatch:
    inputs:
      aks_cluster_name:
        description: 'Name of the AKS Cluster to deploy to'
        required: true
        default: 'arul-week08-aks'
      aks_resource_group:
        description: 'Resource Group of the AKS Cluster'
        required: true
        default: 'deakinuni'
      aks_acr_name:
        description: 'Name of ACR'
        required: true
        default: 'arulrajahacr'

jobs:
  deploy_backend:
    runs-on: ubuntu-latest
    environment: Production

    outputs:
      PRODUCT_API_IP: ${{ steps.get_product_ip.outputs.external_ip }}
      ORDER_API_IP:   ${{ steps.get_order_ip.outputs.external_ip }}

    env:
      K8S_NAMESPACE: ecommerce

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set Kubernetes context (get AKS credentials)
        run: |
          az aks get-credentials \
            --resource-group "${{ github.event.inputs.aks_resource_group }}" \
            --name "${{ github.event.inputs.aks_cluster_name }}" \
            --overwrite-existing
          kubectl cluster-info

      # ‚ùå Removed: Attach ACR (requires Owner and not needed every run)

      - name: Create namespace if missing
        run: |
          kubectl get ns "${K8S_NAMESPACE}" || kubectl create namespace "${K8S_NAMESPACE}"

      - name: Deploy Backend Infrastructure (Namespace, ConfigMaps, Secrets, Databases)
        run: |
          kubectl apply -n "${K8S_NAMESPACE}" -f k8s/configmaps.yaml
          kubectl apply -n "${K8S_NAMESPACE}" -f k8s/secrets.yaml
          kubectl apply -n "${K8S_NAMESPACE}" -f k8s/product-db.yaml
          kubectl apply -n "${K8S_NAMESPACE}" -f k8s/order-db.yaml

      - name: Deploy Backend Microservices (Product, Order)
        run: |
          kubectl apply -n "${K8S_NAMESPACE}" -f k8s/product-service.yaml
          kubectl apply -n "${K8S_NAMESPACE}" -f k8s/order-service.yaml

      - name: Wait for backend rollouts
        run: |
          # Update names if your Deployment names differ
          kubectl rollout status deploy/product -n "${K8S_NAMESPACE}" --timeout=300s
          kubectl rollout status deploy/order   -n "${K8S_NAMESPACE}" --timeout=300s

      - name: Wait for Backend LoadBalancer IPs
        run: |
          echo "Waiting for Product & Order LoadBalancer IPs..."
          PRODUCT_IP=""
          ORDER_IP=""
          PRODUCT_SVC="product-service-w08e1"  # change if your svc name differs
          ORDER_SVC="order-service-w08e1"      # change if your svc name differs
          for i in $(seq 1 120); do
            PRODUCT_I_
